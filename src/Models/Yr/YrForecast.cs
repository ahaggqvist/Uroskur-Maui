// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Uroskur.Shared.Models;
//
//    var yrForecast = YrForecast.FromJson(jsonString);

namespace Uroskur.Models.Yr;

public partial class YrForecast
{
    [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("geometry", NullValueHandling = NullValueHandling.Ignore)]
    public Geometry Geometry { get; set; }

    [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
    public Properties Properties { get; set; }
}

public partial class Geometry
{
    [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    [JsonProperty("coordinates", NullValueHandling = NullValueHandling.Ignore)]
    public List<double> Coordinates { get; set; }
}

public partial class Properties
{
    [JsonProperty("meta", NullValueHandling = NullValueHandling.Ignore)]
    public Meta Meta { get; set; }

    [JsonProperty("timeseries", NullValueHandling = NullValueHandling.Ignore)]
    public List<Timesery> Timeseries { get; set; }
}

public partial class Meta
{
    [JsonProperty("updated_at", NullValueHandling = NullValueHandling.Ignore)]
    public DateTimeOffset? UpdatedAt { get; set; }

    [JsonProperty("units", NullValueHandling = NullValueHandling.Ignore)]
    public Units Units { get; set; }
}

public partial class Units
{
    [JsonProperty("air_pressure_at_sea_level", NullValueHandling = NullValueHandling.Ignore)]
    public string AirPressureAtSeaLevel { get; set; }

    [JsonProperty("air_temperature", NullValueHandling = NullValueHandling.Ignore)]
    public string AirTemperature { get; set; }

    [JsonProperty("air_temperature_max", NullValueHandling = NullValueHandling.Ignore)]
    public string AirTemperatureMax { get; set; }

    [JsonProperty("air_temperature_min", NullValueHandling = NullValueHandling.Ignore)]
    public string AirTemperatureMin { get; set; }

    [JsonProperty("air_temperature_percentile_10", NullValueHandling = NullValueHandling.Ignore)]
    public string AirTemperaturePercentile10 { get; set; }

    [JsonProperty("air_temperature_percentile_90", NullValueHandling = NullValueHandling.Ignore)]
    public string AirTemperaturePercentile90 { get; set; }

    [JsonProperty("cloud_area_fraction", NullValueHandling = NullValueHandling.Ignore)]
    public string CloudAreaFraction { get; set; }

    [JsonProperty("cloud_area_fraction_high", NullValueHandling = NullValueHandling.Ignore)]
    public string CloudAreaFractionHigh { get; set; }

    [JsonProperty("cloud_area_fraction_low", NullValueHandling = NullValueHandling.Ignore)]
    public string CloudAreaFractionLow { get; set; }

    [JsonProperty("cloud_area_fraction_medium", NullValueHandling = NullValueHandling.Ignore)]
    public string CloudAreaFractionMedium { get; set; }

    [JsonProperty("dew_point_temperature", NullValueHandling = NullValueHandling.Ignore)]
    public string DewPointTemperature { get; set; }

    [JsonProperty("fog_area_fraction", NullValueHandling = NullValueHandling.Ignore)]
    public string FogAreaFraction { get; set; }

    [JsonProperty("precipitation_amount", NullValueHandling = NullValueHandling.Ignore)]
    public string PrecipitationAmount { get; set; }

    [JsonProperty("precipitation_amount_max", NullValueHandling = NullValueHandling.Ignore)]
    public string PrecipitationAmountMax { get; set; }

    [JsonProperty("precipitation_amount_min", NullValueHandling = NullValueHandling.Ignore)]
    public string PrecipitationAmountMin { get; set; }

    [JsonProperty("probability_of_precipitation", NullValueHandling = NullValueHandling.Ignore)]
    public string ProbabilityOfPrecipitation { get; set; }

    [JsonProperty("probability_of_thunder", NullValueHandling = NullValueHandling.Ignore)]
    public string ProbabilityOfThunder { get; set; }

    [JsonProperty("relative_humidity", NullValueHandling = NullValueHandling.Ignore)]
    public string RelativeHumidity { get; set; }

    [JsonProperty("ultraviolet_index_clear_sky", NullValueHandling = NullValueHandling.Ignore)]
    [JsonConverter(typeof(ParseStringConverter))]
    public long? UltravioletIndexClearSky { get; set; }

    [JsonProperty("wind_from_direction", NullValueHandling = NullValueHandling.Ignore)]
    public string WindFromDirection { get; set; }

    [JsonProperty("wind_speed", NullValueHandling = NullValueHandling.Ignore)]
    public string WindSpeed { get; set; }

    [JsonProperty("wind_speed_of_gust", NullValueHandling = NullValueHandling.Ignore)]
    public string WindSpeedOfGust { get; set; }

    [JsonProperty("wind_speed_percentile_10", NullValueHandling = NullValueHandling.Ignore)]
    public string WindSpeedPercentile10 { get; set; }

    [JsonProperty("wind_speed_percentile_90", NullValueHandling = NullValueHandling.Ignore)]
    public string WindSpeedPercentile90 { get; set; }
}

public partial class Timesery
{
    [JsonProperty("time", NullValueHandling = NullValueHandling.Ignore)]
    public DateTimeOffset? Time { get; set; }

    [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
    public Data Data { get; set; }
}

public partial class Data
{
    [JsonProperty("instant", NullValueHandling = NullValueHandling.Ignore)]
    public Instant Instant { get; set; }

    [JsonProperty("next_12_hours", NullValueHandling = NullValueHandling.Ignore)]
    public Next12_Hours Next12_Hours { get; set; }

    [JsonProperty("next_1_hours", NullValueHandling = NullValueHandling.Ignore)]
    public Next1_Hours Next1_Hours { get; set; }

    [JsonProperty("next_6_hours", NullValueHandling = NullValueHandling.Ignore)]
    public Next6_Hours Next6_Hours { get; set; }
}

public partial class Instant
{
    [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
    public Dictionary<string, double> Details { get; set; }
}

public partial class Next12_Hours
{
    [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
    public Next12_HoursSummary Summary { get; set; }

    [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
    public Next12_HoursDetails Details { get; set; }
}

public partial class Next12_HoursDetails
{
    [JsonProperty("probability_of_precipitation", NullValueHandling = NullValueHandling.Ignore)]
    public double? ProbabilityOfPrecipitation { get; set; }
}

public partial class Next12_HoursSummary
{
    [JsonProperty("symbol_code", NullValueHandling = NullValueHandling.Ignore)]
    public SymbolCode? SymbolCode { get; set; }

    [JsonProperty("symbol_confidence", NullValueHandling = NullValueHandling.Ignore)]
    public SymbolConfidence? SymbolConfidence { get; set; }
}

public partial class Next1_Hours
{
    [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
    public Next1_HoursSummary Summary { get; set; }

    [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
    public Next1_HoursDetails Details { get; set; }
}

public partial class Next1_HoursDetails
{
    [JsonProperty("precipitation_amount", NullValueHandling = NullValueHandling.Ignore)]
    public long? PrecipitationAmount { get; set; }

    [JsonProperty("precipitation_amount_max", NullValueHandling = NullValueHandling.Ignore)]
    public long? PrecipitationAmountMax { get; set; }

    [JsonProperty("precipitation_amount_min", NullValueHandling = NullValueHandling.Ignore)]
    public long? PrecipitationAmountMin { get; set; }

    [JsonProperty("probability_of_precipitation", NullValueHandling = NullValueHandling.Ignore)]
    public long? ProbabilityOfPrecipitation { get; set; }

    [JsonProperty("probability_of_thunder", NullValueHandling = NullValueHandling.Ignore)]
    public double? ProbabilityOfThunder { get; set; }
}

public partial class Next1_HoursSummary
{
    [JsonProperty("symbol_code", NullValueHandling = NullValueHandling.Ignore)]
    public SymbolCode? SymbolCode { get; set; }
}

public partial class Next6_Hours
{
    [JsonProperty("summary", NullValueHandling = NullValueHandling.Ignore)]
    public Next1_HoursSummary Summary { get; set; }

    [JsonProperty("details", NullValueHandling = NullValueHandling.Ignore)]
    public Next6_HoursDetails Details { get; set; }
}

public partial class Next6_HoursDetails
{
    [JsonProperty("air_temperature_max", NullValueHandling = NullValueHandling.Ignore)]
    public double? AirTemperatureMax { get; set; }

    [JsonProperty("air_temperature_min", NullValueHandling = NullValueHandling.Ignore)]
    public double? AirTemperatureMin { get; set; }

    [JsonProperty("precipitation_amount", NullValueHandling = NullValueHandling.Ignore)]
    public long? PrecipitationAmount { get; set; }

    [JsonProperty("precipitation_amount_max", NullValueHandling = NullValueHandling.Ignore)]
    public long? PrecipitationAmountMax { get; set; }

    [JsonProperty("precipitation_amount_min", NullValueHandling = NullValueHandling.Ignore)]
    public long? PrecipitationAmountMin { get; set; }

    [JsonProperty("probability_of_precipitation", NullValueHandling = NullValueHandling.Ignore)]
    public double? ProbabilityOfPrecipitation { get; set; }
}

public enum SymbolCode { ClearskyDay, ClearskyNight, Cloudy, FairDay, FairNight, PartlycloudyDay, PartlycloudyNight };

public enum SymbolConfidence { Certain, SomewhatCertain, Uncertain };

public partial class YrForecast
{
    public static YrForecast FromJson(string json) => JsonConvert.DeserializeObject<YrForecast>(json, Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this YrForecast self) => JsonConvert.SerializeObject(self, Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
            {
                SymbolCodeConverter.Singleton,
                SymbolConfidenceConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}

internal class SymbolCodeConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(SymbolCode) || t == typeof(SymbolCode?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "clearsky_day":
                return SymbolCode.ClearskyDay;
            case "clearsky_night":
                return SymbolCode.ClearskyNight;
            case "cloudy":
                return SymbolCode.Cloudy;
            case "fair_day":
                return SymbolCode.FairDay;
            case "fair_night":
                return SymbolCode.FairNight;
            case "partlycloudy_day":
                return SymbolCode.PartlycloudyDay;
            case "partlycloudy_night":
                return SymbolCode.PartlycloudyNight;
        }
        throw new Exception("Cannot unmarshal type SymbolCode");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (SymbolCode)untypedValue;
        switch (value)
        {
            case SymbolCode.ClearskyDay:
                serializer.Serialize(writer, "clearsky_day");
                return;
            case SymbolCode.ClearskyNight:
                serializer.Serialize(writer, "clearsky_night");
                return;
            case SymbolCode.Cloudy:
                serializer.Serialize(writer, "cloudy");
                return;
            case SymbolCode.FairDay:
                serializer.Serialize(writer, "fair_day");
                return;
            case SymbolCode.FairNight:
                serializer.Serialize(writer, "fair_night");
                return;
            case SymbolCode.PartlycloudyDay:
                serializer.Serialize(writer, "partlycloudy_day");
                return;
            case SymbolCode.PartlycloudyNight:
                serializer.Serialize(writer, "partlycloudy_night");
                return;
        }
        throw new Exception("Cannot marshal type SymbolCode");
    }

    public static readonly SymbolCodeConverter Singleton = new SymbolCodeConverter();
}

internal class SymbolConfidenceConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(SymbolConfidence) || t == typeof(SymbolConfidence?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
            case "certain":
                return SymbolConfidence.Certain;
            case "somewhat certain":
                return SymbolConfidence.SomewhatCertain;
            case "uncertain":
                return SymbolConfidence.Uncertain;
        }
        throw new Exception("Cannot unmarshal type SymbolConfidence");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (SymbolConfidence)untypedValue;
        switch (value)
        {
            case SymbolConfidence.Certain:
                serializer.Serialize(writer, "certain");
                return;
            case SymbolConfidence.SomewhatCertain:
                serializer.Serialize(writer, "somewhat certain");
                return;
            case SymbolConfidence.Uncertain:
                serializer.Serialize(writer, "uncertain");
                return;
        }
        throw new Exception("Cannot marshal type SymbolConfidence");
    }

    public static readonly SymbolConfidenceConverter Singleton = new SymbolConfidenceConverter();
}
